'''
DO NOT CHANGE THE NAME OF THIS FILE, or else the tester will not work.
The first function requires that you replace the given strings with
your personal details. It is important that you enter your student number
and your student email correctly. If your number and email do not match we
will then check your name, so your name acts as a failsafe.
'''


# Student details
def details():
    student_number = ''  # write your student number as a string
    student_email = '' + '@student.monash.edu'  # write your student email
    name = ''  # write your name as it appears on Moodle
    return str(student_number), student_email, name


def gcd(a, b):
    """ Determines greatest common divisor of two integers.

    Input : two integers a and b such that not a==b==0
    Output: greatest common divisor of a and b

    For example:
    >>> gcd(0, 4)
    4
    >>> gcd(10, 0)
    10
    >>> gcd(18, 27)
    9
    >>> gcd(21, 13)
    1
    """
    if a == 0:
        return b
    if b == 0:
        return a
    else:
        r = a % b
        return gcd(b, r)


def reverse(lst):
    """ Computes reverse of input sequence.

    Input : any list (lst)
    Output: reverse of lst

    For example:
    >>> reverse([1, 2, 3, 4])
    [4, 3, 2, 1]
    >>> reverse([10, 11, 12, 13, 14])
    [14, 13, 12, 11, 10]
    >>> reverse([1])
    [1]
    >>> reverse([])
    []
    """
    if len(lst) == 0:
        return []
    else:
        lst.insert(0, lst.pop())
        return [lst[0]] + reverse(lst[1:])


def is_pal(string):
    """Checks whether string is palindrome.

    Input : any string
    Output: True if string==string[::-1]

    For example:
    >>> is_pal('aa')
    True
    >>> is_pal('aabb')
    False
    >>> is_pal('aba')
    True
    """
    if len(string) == 0:
        return True
    elif string[0] == string[-1]:
        return is_pal(string[1:-1])
    else:
        return False


from collections import deque
from graphs import neighbours, print_grid_traversal
import graphs


def bfs_traversal(graph, s, goals=[]):
    """
    >>> g = graphs.ex_tree
    >>> bfs_traversal(g, 0, {12})
    [0, 1, 2, 12]
    >>> print_grid_traversal(g, 10, bfs_traversal(g, 0, {12}))
    000---001---002   ***---***   ***---***   ***---***---***
                 |     |           |           |           |
    ***---***---003---***---***---***---***---***---***   ***
                 |                 |     |     |     |     |
    ***---***---***---***---***   ***   ***   ***   ***   ***
     |     |     |                       |           |
    ***   ***   ***---***---***---***   ***---***   ***---***
     |     |           |     |
    ***   ***---***   ***   ***---***---***---***---***---***
    >>> print_grid_traversal(g, 10, bfs_traversal(g, 0, {22}))
    000---001---002   ***---***   ***---***   ***---***---***
                 |     |           |           |           |
    ***---004---003---005---***---***---***---***---***   ***
                 |                 |     |     |     |     |
    ***---***---006---***---***   ***   ***   ***   ***   ***
     |     |     |                       |           |
    ***   ***   ***---***---***---***   ***---***   ***---***
     |     |           |     |
    ***   ***---***   ***   ***---***---***---***---***---***
    """
    visited = []
    boundary = deque([s])
    end = list(goals)
    while len(boundary) > 0:
        v = boundary.popleft()
        visited += [v]
        if v == end[0]:
            break
        for w in neighbours(v, graph):
            if w not in visited and w not in boundary:
                boundary.append(w)

        # for i in goals_list:
        #     for j in visited:
        #         if j == i:
        #             break
        #     else:
        #         continue
        #     break
        # else:
        #     continue
        # break
    return visited


def dfs_traversal(graph, s, goals=[]):
    """
    >>> g = graphs.ex_tree
    >>> print_grid_traversal(g, 10, dfs_traversal(g, 0, {12}))
    000---001---002   ***---***   ***---***   ***---***---***
                 |     |           |           |           |
    ***---***---003---***---***---***---***---***---***   ***
                 |                 |     |     |     |     |
    ***---***---***---***---***   ***   ***   ***   ***   ***
     |     |     |                       |           |
    ***   ***   ***---***---***---***   ***---***   ***---***
     |     |           |     |
    ***   ***---***   ***   ***---***---***---***---***---***
    >>> print_grid_traversal(g, 10, dfs_traversal(g, 0, {9, 40, 49}))
    000---001---002   ***---***   ***---***   ***---***---***
                 |     |           |           |           |
    ***---***---003---***---***---***---***---***---***   ***
                 |                 |     |     |     |     |
    ***---***---004---***---***   ***   ***   ***   ***   ***
     |     |     |                       |           |
    ***   ***   005---006---008---***   ***---***   ***---***
     |     |           |     |
    ***   ***---***   007   009---010---011---012---013---014
    """
    visited = []
    boundary = [s]
    while len(boundary) > 0:
        v = boundary.pop()
        visited += [v]
        for w in neighbours(v, graph):
            if w not in visited and w not in boundary:
                boundary.append(w)
        for i in goals:
            for j in visited:
                if j == i:
                    break
            else:
                continue
            break
        else:
            continue
        break
    return visited


def bfs_path(graph, s, goals=[]):
    """
    >>> g = graphs.ex_tree
    >>> print_grid_traversal(g, 10, bfs_path(g, 0, {22}))
    000---001---002   ***---***   ***---***   ***---***---***
                 |     |           |           |           |
    ***---***---003---***---***---***---***---***---***   ***
                 |                 |     |     |     |     |
    ***---***---004---***---***   ***   ***   ***   ***   ***
     |     |     |                       |           |
    ***   ***   ***---***---***---***   ***---***   ***---***
     |     |           |     |
    ***   ***---***   ***   ***---***---***---***---***---***
    """
    visited = []
    boundary = deque([s])
    while len(boundary) > 0:
        v = boundary.popleft()
        visited += [v]
        for w in neighbours(v, graph):
            if w not in visited and w not in boundary:
                boundary.append(w)
        for i in goals:
            for j in visited:
                if j == i:
                    break
            else:
                continue
            break
        else:
            continue
        break
    path = [visited[-1]]
    temp = []
    temp2 = []
    while path[0] != 0:
        for x in neighbours(path[0], graph):
            if x in visited:
                temp.append(x)
        for x in temp:
            if x not in path:
                temp2.append(x)
        for x in temp2:
            if visited.index(x) < visited.index(path[0]):
                path.insert(0, x)
    return path


def dfs_path(graph, s, goals=[]):
    """
    >>> g = graphs.ex_tree
    >>> print_grid_traversal(g, 10, dfs_path(g, 0, [9, 39]))
    000---001---002   ***---***   ***---***   ***---***---***
                 |     |           |           |           |
    ***---***---003---004---005---006---007---008---009   ***
                 |                 |     |     |     |     |
    ***---***---***---***---***   ***   ***   ***   010   ***
     |     |     |                       |           |
    ***   ***   ***---***---***---***   ***---***   011---012
     |     |           |     |
    ***   ***---***   ***   ***---***---***---***---***---***
    """
    visited = []
    boundary = [s]
    while len(boundary) > 0:
        v = boundary.pop()
        visited += [v]
        for w in neighbours(v, graph):
            if w not in visited and w not in boundary:
                boundary.append(w)
        for i in visited:
            for j in goals:
                if j == i:
                    break
            else:
                continue
            break
        else:
            continue
        break
    path = [visited[-1]]
    temp = []
    temp2 = []
    while path[0] != 0:
        for x in neighbours(path[0], graph):
            if x in visited:
                temp.append(x)
        for x in temp:
            if x not in path:
                temp2.append(x)
        for x in temp2:
            if visited.index(x) < visited.index(path[0]):
                path.insert(0, x)
    return path


if __name__ == '__main__':
    """
    For goals [9, 19, 22, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49], 
    bfs traversal will be longer than the dfs traversal. For goals [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 
    20, 21, 23, 25, 26, 30, 31], dfs traversal will be longer than the bfs traversal. 




    """

    import doctest

    doctest.testmod(verbose=True)
